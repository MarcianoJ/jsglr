module UnicodeLambdaLanguage

exports
	context-free start-symbols
		Lambda

	context-free syntax
		"λ" Id* "." Exp -> Lambda {cons("Lambda")}
		
		LetDeclaration Exp 	-> Exp {cons ("Let")}
		Lambda				-> Exp
		Integer				-> Exp 
		Identifier			-> Exp 
		LambdaApp			-> Exp
		JavaCall			-> Exp
		Identifier "(" Exp* ")" -> LambdaApp {cons("LambdaApp")}
		"⟨" Exp "⟩" "(" Exp* ")" -> LambdaApp {cons("ExpLambdaApp")}
		
		"♨"	 JavaName	"(" Exp* ")" -> JavaCall {cons("JavaExpCall")}
		%%"♨"	 Id* "." JavaName -> Lambda {cons("JavaLambda")}
		JavaLambda ("♨",	 Id*, "." ,JavaName) -> Lambda 
		
		Id "≔"	 Exp		-> Declaration {cons("Declaration")}
		"«" Declaration* "»" -> LetDeclaration {cons("LetDeclaration")}
	
		Id -> Identifier {cons ("Identifier")}
		Int -> Integer{cons ("Integer")}
	
	lexical syntax
  		"✎"	 ~u[\n]* [\n] -> LAYOUT
		[\ \t\r\n] 						-> LAYOUT
		(~u[\ \t\r\n\.\(\)⟨⟩✎] / [0-9])+ -> Id {longest-match}
		[0-9]+							-> Int {longest-match}
		[a-zA-Z]([a-zA-Z\.\$\#\_])*			-> JavaName {longest-match}
	