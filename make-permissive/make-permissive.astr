module make-permissive

imports
  libstratego-lib
  libstratego-xtc
  libstratego-sdf
  libstratego-sglr
  libstratego-gpp
  
  lib/sdf-desugar
  lib/multi-options
  lib/switch-options
  lib/sdf-parenthesize

  sdf-analysis
  sdf-heuristics
  water-sections
  insert-sections
  optimize
  pp-commented-sdf

overlays

  WATER_ON           = "water"
  OPEN_INSERTIONS_ON = "open-insertions"
  ALL_INSERTIONS_ON  = "all-insertions"
  INSERTIONS_ON      = "insertions"
  SEPARATORS_ON      = "separators"
  OPTIMIZE_ON        = "optimize"

signature constructors

  EmptyLine   : Production
  CommentLine : String -> Production

strategies // I/O

  main-make-permissive =
    xtc-io-wrap(
      options
    ,
      parse-xtc-file-report-errors(|<get-sdf-parse-table>, None());
      (?definition(_) <+ fatal-err(|"Please specify a packed .def file."));
      // TODO: sdf-desugar; ??
      
      (oncetd(rename-main-module) <+ check-specified-main-module);

      id.init;

      add-permissive-sections;
      
      if-switch(!OPTIMIZE_ON(),
        optimize-sdf
      );
      
      sdf-desugar;      
      parenthesize-Sdf2;
      pp-commented-sdf-string;
      print-to
    )
  
  options =
    SwitchOption(|
      OPEN_INSERTIONS_ON()
    , "on"
    , "Add recovery rules for opening braces"
    )
  + SwitchOption(|
      INSERTIONS_ON()
    , "on"
    , "Add insertion recovery rules"
   )
  + SwitchOption(|
      WATER_ON()
    , "on"
    , "Add water recovery rules"
    )
  + SwitchOption(|
      SEPARATORS_ON()
    , "on"
    , "Add separator recovery rules"
    )
  + SwitchOption(|
      ALL_INSERTIONS_ON()
    , "off"
    , "Add insertion recovery rules for all literals (not recommended)"
    )
  + SwitchOption(|
      OPTIMIZE_ON()
    , "off"
    , "Optimize the inserted literals to character groups"
    )
  + ArgOption(
      "-m"
    , <set-config> ("-m", <id>)
    , "-m INNAME           Specifies the input module name"
    )
  + ArgOption(
      "-mo"
    , <set-config> ("-mo", <id>)
    , "-mo OUTNAME         Specifies the output module name [INNAME-Permissive]"
    )
  
  check-specified-main-module =
    not(<get-config> "-m")
  <+
    <get-config> "-m";
    fatal-err(|"Specified main module not found")

  if-switch(|switch) =
    if-switch(!switch, ?x);
    where(!x)

strategies

  add-permissive-sections:
    definition(modules) -> definition(modules')
    with
      input-length := <collect(?prod(_, _, _)); length>;
      log(|Info(), ["Number of productions to analyze: ", input-length]);
      
      // Analyze all sections, but only add results to the first
      modules' := <one(add-permissive-sections)> modules

  add-permissive-sections:
    "module"#([name, x, sections]) ->
    "module"#([name, x, sections'])
    with
      added         := id.all-permissive-sections;
      output-length := <collect(?prod(_, _, _)); length> added;
      log(|Info(), ["Number of productions generated:  ", output-length]);
      
      !sections;
      try(oncetd(
        \exports(e*) -> exports(conc-grammars(added, e*))\
      ));
      ?sections'

  rename-main-module:
    "module"#([unparameterized(name),  x, sections]) ->
    "module"#([unparameterized(name'), x, sections])
    where
      name.eq(|<get-config> "-m")
    with
      name' := <get-config> "-mo"
    <+
      name' := <conc-strings> (name, "-Permissive")

  rename-main-module:
    "module"#([parameterized(name,  p), x, sections]) ->
    "module"#([parameterized(name', p), x, sections])
    where
      name.eq(|<get-config> "-m")
    with
      name' := <get-config> "-mo"
    <+
      name' := <conc-strings> (name, "-Permissive")

  debug-sdf(m) =
    with(
      say(m);
      (is-list <+ ![<id>]);
      map(
        strip-annos;
        parenthesize-Sdf2;
        pp-sdf-string;
        debug(!"  ")
      )
    )

attributes

  def all-permissive-sections:
    grammar ->
    conc-grammars(
      water-sections
    , insert-sections
    )
    with
      water-sections  := grammar.water-sections;
      insert-sections := grammar.insert-sections
