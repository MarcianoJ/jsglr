module make-permissive

imports
  libstratego-lib
  libstratego-xtc
  libstratego-sdf
  libstratego-sglr
  libstratego-gpp
  
  lib/sdf-desugar
  lib/multi-options
  lib/switch-options

  sdf-analysis
  sdf-heuristics
  water-sections
  insert-sections

overlays

  WATER_ON           = "water"
  OPEN_INSERTIONS_ON = "open-insertions"
  INSERTIONS_ON      = "insertions"

strategies // I/O

  main-make-permissive =
    xtc-io-wrap(
      options
    ,
      parse-xtc-file-report-errors(|<get-sdf-parse-table>, None());
      id.init;
      (?definition(_) <+ fatal-err(|"Please specify a packed .def file."));
      add-permissive-sections;
      
      sdf-desugar;
      pp-sdf-string;
      print-to
    )
  
  options =
    SwitchOption(|
      OPEN_INSERTIONS_ON()
    , "off"
    , "Add recovery rules for opening braces"
    )
  + SwitchOption(|
      INSERTIONS_ON()
    , "on"
    , "Add insertion recovery rules"
   )
  + SwitchOption(|
      WATER_ON()
    , "on"
    , "Add water recovery rules"
    )

  if-switch(|switch) =
    if-switch(!switch, ?x);
    where(!x)

strategies

  add-permissive-sections =
    definition(one(add-permissive-sections))

  add-permissive-sections:
    "module"#([name, x, sections]) ->
    "module"#([name, x, sections'])
    with
      added := id.all-permissive-sections;
      !sections;
      try(oncetd(
        \exports(e*) -> exports(conc-grammars(added, e*))\
      ));
      ?sections'

  debug-sdf(m) =
    with(
      say(m);
      (is-list <+ ![<id>]);
      map(
        strip-annos;
        sdf-desugar;
        pp-sdf-string;
        debug(!"  ")
      )
    )

attributes

  def all-permissive-sections:
    grammar ->
    conc-grammars(
      water-sections
    , insert-sections
    )
    with
      water-sections  := grammar.water-sections;
      insert-sections := grammar.insert-sections
