module make-permissive

imports
  libstratego-lib
  libstratego-xtc
  libstratego-sdf
  libstratego-sglr
  libstratego-gpp
  
  lib/sdf-desugar
  lib/multi-options

  sdf-analysis
  sdf-heuristics
  water-productions

strategies // I/O

  main-make-permissive =
    xtc-io-wrap(
      MultiArgOption("-s"
      , <set-config> ("-s", <id>)
      , !"-s                  Specifies the symbols to make permissive"
      )
    ,
      parse-xtc-file-report-errors(|<get-sdf-parse-table>, None());
      id.init;
      
      make-permissive;
      
      sdf-desugar;
      pp-sdf-string;
      print-to
    )

strategies

  replace-productions:
    "module"#([name, x, sections]) ->
    "module"#([name, x, sections'])
    with
      {| Generated:
        !sections;
        topdown-consnil(try(
          extract-water
        ));
        try(oncetd(
          \exports(e*) -> exports(conc-grammars(e*, <bagof-Generated>))\
        ));
        ?sections'
      |}

  extract-water:
    [p @ prod(_, sort(sort), _) | p*] -> p*
    where
      <get-config> "-s";
      one(id.eq(|sort))
    with
      rules(
        Generated :+= p.water-prods
      )

strategies

  make-permissive =
    /*
    with(
      oncetd(id.is-scope-prod; not(?first); ?prod);
      !prod;
      debug-sdf(!"PROD:");
      id.water-prods;
      debug-sdf(!"WATER:")
    );
    
    <exit> 0;
    */
  
    with(
      say(!"SCOPE PRODS:");
      collect-all(id.is-scope-prod; debug-sdf(!""))      
    );
    
    with(
      say(!"\n\nLISTS AROUND SCOPE PRODS:");
      collect-all(id.is-list-around-scope-prod; debug-sdf(!""))
    );
    
    if not(<get-config> "-s") then
      ![];
      fatal-err(|"Please specify sorts to make permissive")
    end;
    
    alltd(replace-productions)

  debug-sdf(m) =
    with(
      say(m);
      (is-list <+ ![<id>]);
      map(
        strip-annos;
        sdf-desugar;
        pp-sdf-string;
        debug(!"  ")
      )
    )
