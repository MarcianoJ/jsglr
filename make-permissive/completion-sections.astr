module completion-sections

imports

rules //extend grammar with completion rules

generate-completion-grammar-top:
	ast -> ast'
	where
		<store-placeholders-top> ast;
		ast' := <
			alltd(add-completion-syntax);
			oncetd(add-completion-start-rule);
			alltd(flatten-list)
		> ast
		
add-completion-start-rule:
	lexical-syntax(l-prods) -> [lexical-syntax(l-prods), lexical-syntax([<start-lexical-production>])]

add-completion-syntax:
	context-free-syntax(cf-prods) -> [context-free-syntax(cf-prods), context-free-syntax(completion-prods)]
	where
		completion-prods := <generate-completion-productions> cf-prods

generate-completion-productions-top:
	ast -> completion-productions
	where
		<store-placeholders-top> ast;
		cf-prods := <get-cf-productions> ast;
		completion-productions := <generate-completion-productions> cf-prods

generate-completion-productions:
	cf-prods -> <map(add-start-lexical)> completion-productions
	where
		completion-prods-unfiltered := <filter(make-completion-productions); flatten-list> cf-prods;
		completion-productions := <filter-superfluous-completions(|cf-prods)> completion-prods-unfiltered

filter-superfluous-completions(|cf-prods):
	completion-prods -> completion-prods-filtered
	where
		completion-prods-filtered := <
			diff(equal-productions);
			mk-set(equal-productions);
			filter(not({lhs: ?prod([lhs], lhs, _)}))
		> (completion-prods, cf-prods)

rules //create completion rules for context-free productions

make-completion-productions:
	prod@prod(_, _, _) -> completion-productions
	where
		completion-productions := <completion-parts; map(make-completion-production)> prod
	
make-completion-production:
	(lhs-prefix, lhs-suffix, rhs, attr) -> prod(<add-optional-lexicals(|lhs-suffix)> lhs-prefix, rhs, attr-completion)
	where
		suffix-sorts := <filter(is-sort-term)> lhs-suffix;
		constructor := <get-constructor-name> attr; 
		prefix-sorts-count := <filter(is-sort-term); length> lhs-prefix;
		suffix-placeholders := <map(lookup-placeholder)> suffix-sorts; 
		ast-string := <make-ast-string>(constructor, prefix-sorts-count, suffix-placeholders); 
		attr-completion := <replace-cons-with-ast(|ast-string); add-completion-attr; remove-bracket-left-right-attributes> attr

add-optional-lexicals(|lhs-suffix):
	lhs-prefix -> <conc>(lhs-prefix, optional-lexicals)
	where
		if <not(map(is-sort-term))> lhs-prefix then //auto-edit strategy is typically triggered by a lexical in the prefix
			optional-lexicals := <filter(to-opt-lit)> lhs-suffix
		else
			optional-lexicals := []
		end

to-opt-lit = 
	to-opt-lit-opt <+ 
	to-opt-lit-iter <+
	to-opt-lit-lit

to-opt-lit-opt: opt-lit@opt(lit(_)) -> opt-lit
to-opt-lit-iter: iter-lit@iter-star(lit(_)) -> iter-lit
to-opt-lit-iter: iter-lit@iter-star-sep(lit(_), _) -> iter-lit	
to-opt-lit-iter: iter(lit(l)) -> iter-star(lit(l))
to-opt-lit-iter: iter-sep(lit(l), sep) -> iter-star-sep(lit(l), sep)	
to-opt-lit-lit: lit(_) -> opt(<id>)		

make-ast-string:
	(constructor, prefix-sorts-count, suffix-placeholders) -> $["[constructor]([arg-string])"]
	where
		prefix-number-strings := <upto; Tl; map(!$[<[<id>]>])> prefix-sorts-count; 
		suffix-placeholder-strings := <map(write-to-string)> suffix-placeholders; 
		arg-string := <conc; separate-by(|","); concat-strings>(prefix-number-strings, suffix-placeholder-strings)

completion-parts:
	prod(lhs, rhs, attr) -> completion-parts
	where
		lhs-completion-parts := <completion-lhs-parts> lhs;
		completion-parts := <map(\(prefix, suffix) -> (prefix, suffix, rhs, attr)\)> lhs-completion-parts

completion-lhs-parts:
	lhs -> <completion-lhs-parts(|lhs, 1)> []
	
completion-lhs-parts(|lhs, n) = 
	completion-lhs-parts-stop(|lhs, n) <+
	completion-lhs-parts-add(|lhs, n) <+
	completion-lhs-parts-skip(|lhs, n)
	
completion-lhs-parts-stop(|lhs, n):
	lhs-tuples -> lhs-tuples
	where
		<gt>(n, <length> lhs)

completion-lhs-parts-skip(|lhs, n):
	lhs-tuples -> <completion-lhs-parts(|lhs, <inc> n)> lhs-tuples

completion-lhs-parts-add(|lhs, n):
	lhs-tuples -> <completion-lhs-parts(|lhs, <inc> n)>[(prefix, suffix)|lhs-tuples]
	where
		(prefix, suffix) := <split-at(|n)> lhs;
		<is-lhs-completion-prefix> prefix;
		<is-lhs-completion-suffix> suffix

is-lhs-completion-prefix:
	prefix -> prefix
	where //prefix should end with sort term
		<last; is-sort-term> prefix

is-lhs-completion-suffix:
	suffix -> suffix
	where //suffix should contain a non-optional subterm
		<not(map(?opt(_) <+ ?iter-star(_) <+ ?iter-star-sep(_, _)))> suffix
		
rules //recursive generation of suitable placeholders for sorts

/**
 * Fills lookup table that maps sorts to placeholder ast nodes
 */
store-placeholders-top:
	ast -> ast
	where
	  cf-productions := <get-cf-productions> ast;
	  remaining-cf-prods-1 := <store-placeholders-iteratively> cf-productions; //stores all wellformed placeholders
	  lexical-productions := <get-lexical-productions> ast;
	  <filter(store-lexical-default-placeholder)> lexical-productions; //stores placeholders for lexical productions
	  remaining-cf-prods-2 := <store-placeholders-iteratively> remaining-cf-prods-1;  //stores placeholders with possible malformed strings 
	  <filter(store-cf-default-placeholder)> remaining-cf-prods-2 //stores placeholders with NULL() elements

store-placeholders-iteratively:
	cf-prods -> remaining-cf-prods
	where
	  remaining-cf-prods := 
	  	<repeat({prods: ?prods; filter(not(store-placeholder)); not(?prods)})> cf-prods
	
store-placeholder:
	prod(lhs, rhs, attrs) -> prod(lhs, rhs, attrs)
	where
		<not(lookup-placeholder)> rhs;
		placeholder := <create-placeholder> prod(lhs, rhs, attrs); 
		rules(LookupPlaceholder: rhs -> placeholder)

create-placeholder:
	prod(lhs, _, attrs) -> placeholder
	where
		child-placeholders := <filter(is-sort-term); map(lookup-placeholder)> lhs;
		constructor := <get-constructor-name> attrs;
		placeholder := constructor#(child-placeholders)

create-placeholder:
	p@prod(lhs, _, attrs) -> placeholder
	where
		<is-injection-production> p; 
		placeholder := <filter(is-sort-term); ?[<lookup-placeholder>]> lhs

store-lexical-default-placeholder:
	p@prod(_, rhs, _) -> p
	where
		<not(lookup-placeholder)> rhs;
		placeholder := <get-lexical-default-placeholder> ; 
		rules(LookupPlaceholder: rhs -> placeholder)

store-cf-default-placeholder:
	p@prod(_, rhs, _) -> p
	where
		<not(lookup-placeholder)> rhs;
		placeholder := <get-cf-default-placeholder>;
		rules(LookupPlaceholder: rhs -> placeholder)
	
rules //inductively created placeholders

lookup-placeholder = LookupPlaceholder
	
lookup-placeholder:
	iter-star(_) -> []
	where
		is-sort-term

lookup-placeholder:
	iter-star-sep(_, _) -> []	
	where
		is-sort-term

lookup-placeholder:
	opt(_) -> None()
	where
		is-sort-term

lookup-placeholder:
	alt(a, b) -> <<lookup-placeholder> a <+ <lookup-placeholder> b >

lookup-placeholder:
	iter(srt) -> [<lookup-placeholder> srt]

lookup-placeholder:
	iter-sep(srt, _) -> [<lookup-placeholder> srt]

get-lexical-default-placeholder = !"MISSING_TOKEN"

get-cf-default-placeholder = !NULL()

signature constructors
	NULL : Missing


rules //helpers
	
is-sort-term = where(oncetd(?sort(_)))

is-injection-production:
	p@prod(lhs, _, attrs) -> p
	where
		<not(has-ast-attr)> attrs;
		<filter(is-sort-term); ?[_]> lhs

has-ast-attr =
	where(
		oncetd(
			?default(appl(unquoted("ast"),_)) <+
			?default(appl(unquoted("cons"),_))
		)
	)

get-constructor-name:
	attrs -> cons-name
	where
	  oncetd(
		?default(appl(unquoted("cons"), [fun(quoted(<un-double-quote; ?cons-name>))]))
	  )

get-cf-productions =
	collect-all(?context-free-syntax(<id>));
	flatten-list;
	filter(not(is-ignore-production))

get-lexical-productions =
	collect-all(?lexical-syntax(<id>));
	flatten-list;
	filter(not(is-ignore-production))
	
is-ignore-production:
	p@prod(_, _, attr) -> p
	where
		oncetd(
			?fun(unquoted("recover")) <+
			?fun(unquoted("completion"))
		) 

add-completion-attr:
	 attrs(lst) -> attrs([term(default(fun(unquoted("completion"))))|lst])

remove-bracket-left-right-attributes:
	attrs(lst) -> attrs(<filter(not(is-bracket-left-right-attr))>lst)

is-bracket-left-right-attr =
	?bracket() <+ ?assoc(left()) <+ ?assoc(right())

replace-cons-with-ast(|ast-string) = 
	oncetd(replace-cons-attr-with-ast-attr(|ast-string))

replace-cons-attr-with-ast-attr(|ast-string) :
	default(appl(unquoted("cons"), [fun(quoted(_))])) -> default(appl(unquoted("ast"), [fun(quoted(ast-string))]))

equal-productions:
	prod-pair@(prod(lhs, rhs, _), prod(lhs, rhs, _)) -> prod-pair

mk-set(eq)=
	foldr(![], union(eq), ![<id>])

add-start-lexical:
	prod(lhs, rhs, attr) -> prod([<start-lexical>|lhs], rhs, attr)

start-lexical-production =
	!prod(
	      []
	    , <start-lexical>
	    , attrs([term(default(fun(unquoted("completion"))))])
	    )

start-lexical = !lit("\"@#$\"")