module water-productions

attributes

  def water-prods:
    prod(_, sort(sort), _) ->
    |[ lexical syntax
         ~[\ \t\12\r\n]+ -> ~water
   
       lexical restrictions
         ~water -/- ~[\ \t\12\r\n]
       
       sorts
         ~wstar ~wplus ~water
       
       context-free syntax
       
         p1
         
         ~wplus -> ~wstar
                -> ~wstar {ast("[]")} %% "nil"
         
         ~sort  ~wplus -> ~wplus {ast("<conc([<1>],<2>)>)")}              %% "cons"
         ~water ~wplus -> ~wplus {ast("<conc([Water(<1>)],<2>)>"), avoid} %% "cons"
    ]|
    with
      p1    := id.replace-water-pattern;
      wstar := sort.iter-star-pattern-name;
      wplus := sort.iter-pattern-name;
      water := "WATER"
  
  // TODO: iter-sep, iter-star-sep    
     
  def rewrite-bu replace-water-pattern:
    iter(sort(pattern))               -> sort(pattern.iter-pattern-name)
    iter-star(sort(pattern))          -> sort(pattern.iter-star-pattern-name)
    iter-sep(sort(pattern), sep)      -> sort(pattern.iter-sep-pattern-name(|sep))
    iter-star-sep(sort(pattern), sep) -> sort(pattern.iter-star-sep-pattern-name(|sep))

attributes // Names of generated symbols
  
  def context-free iter-pattern-name:
    name -> <newname> <conc-strings> (name, "WPlus")
   
  def context-free iter-star-pattern-name:
    name -> <newname> <conc-strings> (name, "WStar")
  
  def context-free iter-sep-pattern-name(|sep):
    name -> <newname> <conc-strings> (name, "WPlusSep")
  
  def context-free iter-star-sep-pattern-name(|sep):
    name -> <newname> <conc-strings> (name, "WStarSep")

