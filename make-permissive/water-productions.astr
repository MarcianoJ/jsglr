module water-productions

attributes

  def all-permissive-sections:
    grammar ->
    conc-grammars(
      water-sections
    , insert-sections
    )
    with
      water-sections  := grammar.water-sections;
      insert-sections := grammar.insert-sections

  def water-sections:
    id ->
    |[ sorts
         WATER WATERTOKEN WATERTOKENSTART WATERTOKENSEPARATOR WATEREOF
       
       lexical syntax
         [A-Za-z0-9\_]                  -> WATERTOKENSTART {avoid}
         WATERTOKENSTART [A-Za-z0-9\_]* -> WATERTOKEN
         ~[A-Za-z0-9\_\ \t\12\r\n]      -> WATERTOKENSEPARATOR {avoid}
         WATERTOKEN                     -> WATER
         WATERTOKENSEPARATOR            -> WATER
  
       lexical restrictions    
         WATEREOF        -/- ~[]
         WATERTOKEN -/- [A-Za-z0-9\_]
  
       context-free syntax
         WATER -> LAYOUT {cons("WATER")}
    ]|

attributes

  def insert-sections:
    id ->
    |[ lexical syntax
         p*
    ]|
    with
      p* := id.all-insert-prods
  
  def collect-all all-insert-prods:
    prod([lit(_) | pattern], _, _) ->
    |[ 
       -> ~closinglit {avoid, cons("INSERTION")}
    ]|
    where
      id.in-context-free-section;
      <last> pattern => closinglit;
      id.is-only-used-as-closing-literal
  
  def is-only-used-as-closing-literal:
    lit(x) -> id
    where
      not(
        id.root;
        oncetd(
          id.eq(|lit(x));
          id.next-sibling => [_ | _] // not last in list
        )
      )

attributes

  def down in-context-free-section:
    context-free-syntax(_) -> id