module insert-sections

imports
  sdf-injections

attributes

  def insert-sections:
    sections ->
    |[ sorts
         WATEREOF
  
       lexical restrictions    
         WATEREOF -/- ~[]
         
       lexical syntax
         ~%% Lexical insertion recovery rules
         p1*
       
       syntax
         ~%% Kernel syntax insertion recovery rules
         p2*
    ]|
    where
      if-switch(|INSERTIONS_ON())
    with
      p1* := sections.lexical-insert-prods;
      p2* := sections.kernel-insert-prods
  
  eq insert-sections:
    sections -> |[ context-free syntax ]|
    where
      not(if-switch(|INSERTIONS_ON()))
  
  def after(id.make-set) Set collect-bagof before(not(id.is-reject-prod)) lexical-insert-prods
  
  def after(id.make-set) Set collect-bagof before(not(id.is-reject-prod)) kernel-insert-prods
  
attributes // Simple closing literals (e.g., "}")

  // TODO: Opening and closing literals may also appear in pairs
  //       e.g. "begin" "do" S "while" E "end" "do" -> S

  eq lexical-insert-prods:
    prod([lit(_) | pattern-and-lit], _, _) ->
    |[ 
       -> ~closinglit {recover, cons("INSERTION")}
    ]|
    where
      id.in-context-free-section
    where
      closinglit := <last> pattern-and-lit;
      ?lit(_)
    where
      not(closinglit.is-used-as-opening-literal)
  
  // TODO: Discard any nullable components in this test

  def Test is-used-as-opening-literal: // TODO: Optimize: use lookup-global?
    lit(x) -> id
    where
      id.root;
      oncetd(
        ?lit(_);
        id.eq(|lit(x));
        id.is-list-head
      )
  
  def Test is-list-head:
    [x | _] -> id
    where
      not(id.parent => [_ | _])
  
attributes // Simple opening literals (e.g., "{")

  // FIXME: open prods rule gives more false positives than any other rule
  //        maybe the closing literal should be checked more strictly
  //        (e.g., ";" is not a good closing bracket)

  eq lexical-insert-prods:
    prod([openinglit | pattern-and-lit], _, _) ->
    |[ 
       -> ~openinglit {recover, cons("INSERTION")}
    ]|
    where
      id.in-context-free-section
    where
      !openinglit => lit(_)
    where
      <split-last> pattern-and-lit => (_, closinglit @ lit(_))
    where
      not(closinglit.eq(|openinglit)) // handled by "string" insertion
    where
      not(closinglit.is-used-as-opening-literal)
    where
      if-switch(|OPEN_BRACKETS_ON())

attributes // Layout closing literals (e.g., comments)

  // TODO: INSERTSTART*, INSERTOPENQUOTE sorts should be declared

  eq lexical-insert-prods:
    prod([openinglit | pattern-and-lit], sort, _) ->
    |[ 
       ~openinglit                    -> ~openingsort {recover}
       ~openingsort ~pattern WATEREOF -> ~sort {cons("INSERTEND")}
    ]|
    where
      id.is-comment-prod
    where
      (pattern, closinglit) := <split-last> pattern-and-lit
    with
      openingsort := <newname> "INSERTSTART"

  def Test is-comment-prod:
    prod([lit(_) | pattern-and-lit], target, _) -> id
    where
      closinglit := <last> pattern-and-lit;
      ?lit(_)
    where
      layout().eq(|target)
    <+
      target.direct-container-prods;
      one(
        // TODO: Use "is-injection-from"
        ?prod(_, layout(), _)
      )
  
attributes // Matched (e.g. string) closing literals

  eq lexical-insert-prods =
    id.in-lexical-section;
    id.insert-quote-prod
    
  // XXX: Insertions based on kernel productions need to maintain the constructor
  // i.e., in Java, the original production is:
  //   "\""             StringPart* "\"" -> StringLiteral {cons("String")}
  // and cannot just be transformed to:
  //   INSERTOPENQUOTE0 StringPart* "\n" -> StringLiteral {recover, cons("INSERTEND")}
  
  eq kernel-insert-prods =
    id.in-kernel-section;
    id.insert-quote-prod

  def insert-quote-prod:
    prod([openingquote | pattern-and-quote], sort, _) ->
    |[ 
       ~openingquote                       -> ~openingquotesort {recover}
       ~openingquotesort ~pattern "\\n"    -> ~sort             {cons("INSERTEND")}
       ~openingquotesort ~pattern WATEREOF -> ~sort             {cons("INSERTEND")}
    ]|
    where
      (pattern, closingquote) := <split-last> pattern-and-quote
    where
      openingquote.eq(|closingquote);
      openingquote.is-quote-lit
    with
      openingquotesort := <newname> "INSERTOPENQUOTE"
      
  def id.pattern-allows-newlines =
    fail // TODO: Check if string pattern does not allow newlines?
  
  def Test is-quote-lit:
    lit(quote) -> id
    where
      id.root;
      alltd(
        id.eq(|lit(quote));
        id.in-potential-quote-prod
      )

  def Test down in-potential-quote-prod:
    prod([openingquote | pattern-and-quote], _, _) -> id
    where
      id.in-lexical-section + id.in-kernel-section
    where
      (pattern, closingquote) := <split-last> pattern-and-quote
    where
      openingquote.eq(|closingquote)
    where
      not(pattern.pattern-allows-newlines)

attributes // Separator literals (e.g., ",")

  eq lexical-insert-prods:
    lit @ lit(_) -> |[ -> ~lit {recover, cons("INSERTION")} ]|
    where
      id.in-iter-pattern;
      id.in-context-free-section
    where
      if-switch(|OPEN_BRACKETS_ON())
    <+
      not(lit.is-used-as-opening-literal)
    where
      if-switch(|SEPARATORS_ON())

attributes // Non-nestable region keywords (e.g., "attributes" or "strategies")

  eq lexical-insert-prods:
    lit @ lit(_) -> |[ -> ~lit {recover, cons("INSERTION")} ]|
    where
      if-switch(|NONNESTABLE_ON())
    where
      id.in-context-free-section
    where
      id.current-prod.direct-contained-sorts => [_ | _]
    where
      not(id.current-prod.is-contained-by(|id.current-sort))
    where
      if-switch(|OPEN_BRACKETS_ON())
    <+
      not(lit.is-used-as-opening-literal)
    where
      id.all-start-symbols.one({sort: ?sort(sort); lit.current-prod.is-contained-by(|sort) })

attributes // Start production literals (e.g., "module")

  eq lexical-insert-prods:
    lit @ lit(_) -> |[ -> ~lit {recover, cons("INSERTION")} ]|
    where
      id.is-start-symbol(|id.current-sort)
    where
      if-switch(|OPEN_BRACKETS_ON())
    <+
      not(lit.is-used-as-opening-literal)
    where
      not(id.current-prod.is-contained-by(|id.current-sort))

attributes // All-literal insertion

  eq lexical-insert-prods:
    lit @ lit(_) -> |[ -> ~lit {recover, cons("INSERTION")} ]|
    where
      id.in-context-free-section
    where
      if-switch(|ALL_INSERTIONS_ON())

// TODO: Special case for context brackets, like |[ and ]|?
//       - these cannot be nested, and only appear in a fully balanced fashion
//       - an open-brace insertion is extremely useful for these
